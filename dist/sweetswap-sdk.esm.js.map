{"version":3,"file":"sweetswap-sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42,\n  HECOMAIN = 128,\n  HECOTEST = 256,\n  BIANMAIN = 56,\n  BIANTEST = 97,\n  OKTEST = 65,\n  OKTMAIN = 66\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const INIT_CODE_HASHES : { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.ROPSTEN]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.RINKEBY]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.GÖRLI]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.KOVAN]: '0xe3a2d8b356e0265479117bb262881a7c7c690a1cf7392d0ab59e30d5134cbe06',\n  [ChainId.HECOMAIN]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.HECOTEST]: '0x3990fda9ab516b83a46ecb97d0e6916dcfc56eae1ae253e0b7a74b0412065af1',\n  [ChainId.BIANMAIN]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.BIANTEST]: '0x1ae685a06ad758dcd2c4191b790c1c3283d1d56d917bc1bad7328c2a4f2ab5a0',\n  [ChainId.OKTEST]: '0xa9252a257da1cf1409d57be07f4bffae98731dad512dd65b33f8ef8a999d92c5',\n  [ChainId.OKTMAIN]: '0xa9252a257da1cf1409d57be07f4bffae98731dad512dd65b33f8ef8a999d92c5'\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '',\n  [ChainId.ROPSTEN]: '',\n  [ChainId.RINKEBY]: '',\n  [ChainId.GÖRLI]: '',\n  [ChainId.KOVAN]: '0x54038C23b72b01eeDBaF4AE4C098D329FB2D32f1',\n  [ChainId.HECOMAIN]: '0x76854443c1FC36Bbad8E9Ae361ED415dD673640f',\n  [ChainId.HECOTEST]: '0xe2c1453d83f11Fa331a3Ece2D6E174F795071639',\n  [ChainId.BIANMAIN]: '0x76854443c1FC36Bbad8E9Ae361ED415dD673640f',\n  [ChainId.BIANTEST]: '0x76854443c1FC36Bbad8E9Ae361ED415dD673640f',\n  [ChainId.OKTEST]: '0xbb362F4213eF1c0114158778c85861c8cdc0a66e',\n  [ChainId.OKTMAIN]: '0xbb362F4213eF1c0114158778c85861c8cdc0a66e'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\n// export const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number,tradcomp:(a:T)=>number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  if(tradcomp(add) < 0) {\n    return null\n  }\n\n  // short circuit first item add\n  if (items.length === 0) {\n    if(tradcomp(add) == 0) {\n      items.push(add)\n    }\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { ChainId,SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\nconst CurrencyName = {\n  [ChainId.MAINNET]: 'ETH',\n  [ChainId.ROPSTEN]: 'ETH',\n  [ChainId.RINKEBY]: 'ETH',\n  [ChainId.GÖRLI]: 'ETH',\n  [ChainId.KOVAN]: 'ETH',\n  [ChainId.BIANMAIN]: 'BNB',\n  [ChainId.BIANTEST]: 'BNB',\n  [ChainId.HECOMAIN]: 'HT',\n  [ChainId.HECOTEST]: 'HT',\n  [ChainId.OKTEST]: 'OKT',\n  [ChainId.OKTMAIN]: 'OKT'\n}\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, '(Currency)', 'Currency')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n  \n  toDisplayableSymbol(chainId: ChainId) {\n    if (this !== ETHER) throw new Error('Not currency instance')\n    return CurrencyName[chainId]\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.HECOMAIN]: new Token(ChainId.HECOMAIN, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\n  [ChainId.HECOTEST]: new Token(ChainId.HECOTEST, '0x50B29a42c9e4d0f940292c386207f492458eE358', 18, 'WHT', 'Wrapped HT'),\n  [ChainId.BIANMAIN]: new Token(ChainId.BIANMAIN, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BIANTEST]: new Token(ChainId.BIANTEST, '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.OKTEST]: new Token(ChainId.OKTEST, '0xB13991B6253172118b962045906b27ce73C21ecD', 18, 'WOKT', 'Wrapped OKT'),\n  [ChainId.OKTMAIN]: new Token(ChainId.OKTMAIN, '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15', 18, 'WOKT', 'Wrapped OKT')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nexport class Pair {\n  public readonly pairAddr: string\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n\n  //   const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n  //   if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n  //     PAIR_ADDRESS_CACHE = {\n  //       ...PAIR_ADDRESS_CACHE,\n  //       [tokens[0].address]: {\n  //         ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n  //         [tokens[1].address]: getCreate2Address(\n  //           FACTORY_ADDRESS[tokenA.chainId],\n  //           keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n  //           INIT_CODE_HASHES[tokenA.chainId]\n  //         )\n  //       }\n  //     }\n  //   }\n\n  //  return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  // }\n\n\n  public constructor(pairAddr:string,tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      pairAddr,\n      18,\n      'GLP:' + tokenAmounts[0].token.symbol + '-' + tokenAmounts[1].token.symbol,\n      'GoSwap LP Token'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.pairAddr = pairAddr\n  }\n\n  public getAddress(tokenA: Token, tokenB: Token): string {\n    // return this.pairAddr\n\n    tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] \n    \n    return this.pairAddr\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount, fee = 997): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, JSBI.BigInt(fee))\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(this.pairAddr,inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount, fee = 997): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), JSBI.BigInt(fee))\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(this.pairAddr,inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairsAddress: string[]\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairsAddress = new Array(pairs.length);\n    pairs.every(pair => this.pairsAddress.push(pair.pairAddr))\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\nexport function tradeFilter(a: Trade) {\n  if(currencyEquals(a.inputAmount.currency, a.outputAmount.currency)) {\n    if (a.outputAmount.lessThan(a.inputAmount)){\n      return -1\n    }\n  }\n\n  return 0\n}\n\nexport function arbComparator(a: Trade, b: Trade) {\n  let Aprofit = JSBI.subtract(a.output,a.optimalAmount)\n   let Bprofit = JSBI.subtract(b.output,b.optimalAmount)\n\n   if(JSBI.GE(Aprofit,Bprofit)) {\n     return -1\n   }else{\n     return 1\n   }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\nfunction getOptimalAmount(Ea: JSBI, Eb: JSBI): JSBI {\n  const numerator = JSBI.multiply(JSBI.multiply(JSBI.multiply(Ea, Eb), JSBI.BigInt(1000)),JSBI.BigInt(997))\n  const numm = JSBI.multiply(Ea, JSBI.BigInt(1000))\n\n  const num1 = JSBI.subtract(JSBI.BigInt(Math.sqrt(JSBI.toNumber(numerator))),numm)\n  const num2 = JSBI.divide(num1,JSBI.BigInt(997))\n\n  return num2\n}\n\nfunction getAmountOut(amountIn:JSBI, reserveIn:JSBI, reserveOut:JSBI):JSBI {\n  const numerator =JSBI.multiply(JSBI.multiply(reserveOut, amountIn), JSBI.BigInt(997))\n  const numm = JSBI.add(JSBI.multiply(JSBI.BigInt(1000), reserveIn),JSBI.multiply(JSBI.BigInt(997), amountIn))\n\n  return JSBI.divide(numerator,numm)\n}\n\nfunction getEaEb(tokenIn:Token, pairs:Pair[]):[JSBI,JSBI] {\n  let Ea: JSBI  = ZERO\n  let Eb: JSBI  = ZERO\n  let Ra :JSBI\n  let Rb : JSBI\n  let Rb1 :JSBI\n  let Rc : JSBI\n  let tokenOut: Token = tokenIn\n\n  for (let i = 0; i < pairs.length; i++) {\n    const pair = pairs[i]\n    if(i == 0){\n       if(tokenIn.address == pair.token0.address) {\n        tokenOut = pair.token1\n       }else{\n        tokenOut = pair.token0\n       }\n    }else if(i == 1) {\n         Ra = pairs[0].reserve0.raw\n         Rb = pairs[0].reserve1.raw\n\n        if(tokenIn.address == pairs[0].token1.address) {\n          let temp :JSBI = Ra\n          Ra = Rb\n          Rb = temp\n        }\n\n        Rb1 = pair.reserve0.raw\n        Rc = pair.reserve1.raw\n\n       if (tokenOut.address == pair.token1.address){\n            let temp = Rb1\n            Rb1 = Rc\n            Rc = temp\n            tokenOut = pair.token0\n       }else{\n        tokenOut = pair.token1\n       }\n\n      const numerator = JSBI.multiply(JSBI.multiply(Ra, Rb1), JSBI.BigInt(1000))\n      const denominator = JSBI.add(JSBI.multiply(Rb1, JSBI.BigInt(1000)), JSBI.multiply(JSBI.BigInt(997),Rb))\n      Ea = JSBI.divide(numerator, denominator)\n\n      const numerator2 = JSBI.multiply(JSBI.multiply(Rb, Rc), JSBI.BigInt(997))\n      const denominator2 = JSBI.add(JSBI.multiply(Rb1, JSBI.BigInt(1000)), JSBI.multiply(JSBI.BigInt(997),Rb))\n      Eb = JSBI.divide(numerator2, denominator2)\n  }else{\n        Ra = Ea\n        Rb = Eb\n        \n        Rb1 = pair.reserve0.raw\n        Rc  = pair.reserve1.raw\n\n        if(tokenOut.address == pair.token1.address) {\n          let  temp = Rb1\n          Rb1 = Rc\n          Rc = temp\n            tokenOut = pair.token0\n        }else{\n           tokenOut = pair.token1\n        }\n\n        const numerator = JSBI.multiply(JSBI.multiply(Ra, Rb1), JSBI.BigInt(1000))\n        const denominator = JSBI.add(JSBI.multiply(Rb1, JSBI.BigInt(1000)), JSBI.multiply(JSBI.BigInt(997),Rb))\n        Ea = JSBI.divide(numerator, denominator)\n\n        const numerator2 = JSBI.multiply(JSBI.multiply(Rb, Rc), JSBI.BigInt(997))\n        const denominator2 = JSBI.add(JSBI.multiply(Rb1, JSBI.BigInt(1000)), JSBI.multiply(JSBI.BigInt(997),Rb))\n        Eb = JSBI.divide(numerator2, denominator2)\n    }\n  }\n\n    return [Ea,Eb]\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public readonly optimalAmount: JSBI\n\n  public readonly output: JSBI\n\n\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT,ZERO,ZERO)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT,ZERO,ZERO)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType,optimalAmount:JSBI,output:JSBI) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n\n    let fee = 997\n    if (\n      (route.input.symbol === 'BUSD' && route.output.symbol === 'USDT') ||\n      (route.input.symbol === 'USDT' && route.output.symbol === 'BUSD')\n    )\n      fee = 1000\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i], fee)\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i], fee)\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n    this.optimalAmount = optimalAmount\n    this.output = output\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  public static findArb(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 1, maxHops = 4 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const originToken = wrappedAmount(originalAmountIn, chainId)\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n\n    invariant(originToken.token.equals(tokenOut)) \n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut) && currentPairs.length > 2) {\n         let [Ea, Eb] = getEaEb(tokenOut, [...currentPairs, pair]) \n          if(Ea < Eb) {\n              sortedInsert( \n                bestTrades,\n                new Trade(\n                  new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n                  originalAmountIn,\n                  TradeType.EXACT_INPUT,\n                  getOptimalAmount(Ea, Eb),\n                  getAmountOut(getOptimalAmount(Ea, Eb),Ea,Eb)\n                ),\n                maxNumResults,\n                arbComparator,\n                tradeFilter\n              )\n          }\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.findArb(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 1, maxHops = 4 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT,\n            ZERO,\n            ZERO\n          ),\n          maxNumResults,\n          tradeComparator,\n          tradeFilter\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT,\n            ZERO,\n            ZERO\n          ),\n          maxNumResults,\n          tradeComparator,\n          tradeFilter\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactHTForTokensSupportingFeeOnTransferTokens' : 'swapExactHTForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForHTSupportingFeeOnTransferTokens' : 'swapExactTokensForHT'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapHTForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactHT'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport { Token } from './entities/token'\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() { }\n\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = await Pair.getAddress(tokenA, tokenB)\n\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(\"\",new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","INIT_CODE_HASHES","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","HECOMAIN","HECOTEST","BIANMAIN","BIANTEST","OKTEST","OKTMAIN","FACTORY_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","tradcomp","length","push","isFull","lo","hi","mid","splice","pop","CurrencyName","Currency","decimals","symbol","toDisplayableSymbol","chainId","ETHER","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","Pair","pairAddr","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","fee","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","pairsAddress","Array","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeFilter","arbComparator","Aprofit","optimalAmount","Bprofit","GE","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","getOptimalAmount","Ea","Eb","numm","num1","Math","toNumber","num2","getAmountOut","amountIn","reserveIn","reserveOut","getEaEb","tokenIn","Ra","Rb","Rb1","Rc","tokenOut","temp","numerator2","denominator2","Trade","tradeType","amounts","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","findArb","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","undefined","originToken","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactIn","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","Fetcher","fetchPairData","provider","getDefaultProvider","getNetwork","Contract","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"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"}